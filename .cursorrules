# Notepad.md - Project Intelligence

## Project Philosophy
- **"Obsidian but with less"** - Core design principle that guides all decisions
- **Simplicity First**: Every feature must justify its existence
- **Notepad Heritage**: Maintain the beloved simplicity of Windows Notepad
- **No Feature Creep**: Resist adding complexity that compromises the core vision

## Code Patterns & Preferences

### Architecture Principles
- **Single HTML File**: All UI in one cohesive document (src/index.html)
- **Pure JavaScript**: No frameworks - vanilla JS for maximum control and simplicity
- **CSS-First Design**: Heavy use of CSS for animations and interactions
- **Electron Integration**: Minimal main.js focused on file system and window management

### Design System
- **Typography Hierarchy**: Inter (UI) + JetBrains Mono (code)
- **Color Palette**: Sophisticated grays with blue accents for interactivity
- **Animation Style**: Subtle, smooth transitions - never jarring
- **Layout Philosophy**: Split-screen with collapsible preview panel

### File Management Patterns
- **Dual File System**: .md (individual) and .npmd (session) files
- **Auto-titling Logic**: First line of content becomes tab title
- **Session Persistence**: Transparent to user, robust recovery
- **Visual Indicators**: Blue dots for unsaved changes, clear save states

## Critical Implementation Details

### Tab Management
- **State Isolation**: Each tab maintains independent editor state
- **Smooth Switching**: No flickering or content flash during tab changes
- **Auto-save Integration**: Continuous background saving without user awareness
- **Title Generation**: Dynamic tab titles from content, fallback to "Untitled"

### Editor/Preview Synchronization
- **Live Updates**: Real-time markdown rendering
- **Toggle Functionality**: Preview can be hidden for distraction-free writing
- **Scroll Sync**: Preview follows editor scroll position
- **Performance**: Debounced rendering for smooth typing experience

### Keyboard Shortcuts Philosophy
- **Standard Conventions**: Follow established patterns (Ctrl+S, Ctrl+T, etc.)
- **Power User Support**: Quick access to all core functions
- **No Conflicts**: Avoid overlapping with system or Electron defaults

### Find & Replace UX Innovation
- **Non-Intrusive Search**: Live search without cursor stealing - crucial UX pattern
- **Delayed Highlighting**: 500ms timeout prevents typing interruption while providing feedback
- **Smart State Management**: Separate search logic from highlighting for smooth user experience
- **Predictable Navigation**: F3/Shift+F3 standard, Enter/Shift+Enter in inputs
- **Auto-Population**: Selected text becomes search term - user expectation fulfilled
- **Focus Mode Integration**: Panel hidden during distraction-free writing

## Quality Standards

### Performance Targets
- **Startup Time**: <2 seconds from launch to ready
- **Typing Responsiveness**: No lag during rapid input
- **File Operations**: Instant save/load for typical file sizes
- **Memory Efficiency**: Minimal resource usage

### User Experience Requirements
- **Zero Learning Curve**: New users productive immediately
- **Graceful Degradation**: App continues working if features fail
- **Data Safety**: Multiple mechanisms prevent content loss
- **Visual Polish**: Professional appearance without complexity

## Development Workflow

### Testing Priorities
1. **File Operations**: Save/load reliability across file types
2. **Session Management**: Restoration accuracy after app restart
3. **Tab Switching**: Smooth transitions and state preservation
4. **Preview Accuracy**: Markdown rendering correctness
5. **Keyboard Shortcuts**: All combinations work as expected
6. **Find & Replace**: Non-intrusive search, accurate text replacement, proper state cleanup

### Build Process
- **Electron Packaging**: Windows-focused build pipeline
- **Asset Management**: Icon and resource optimization
- **Distribution**: Single .exe installer for easy deployment

## Known Constraints & Decisions

### Technical Limitations
- **Windows Primary**: Desktop version optimized for Windows
- **Local-Only**: No cloud integration or network features
- **Single Window**: No multi-window support to maintain simplicity

### Feature Boundaries
- **No Plugin System**: Maintain simplicity by avoiding extensibility
- **Limited Themes**: Avoid customization complexity
- **Essential Markdown Only**: Support core features, avoid edge cases
- **No Advanced Formatting**: Stay true to text-editor roots

## Maintenance Philosophy
- **Stability Over Features**: Prefer reliability to new capabilities
- **Dependency Minimization**: Keep external dependencies to absolute minimum
- **Backward Compatibility**: Session files should always be readable
- **Performance Monitoring**: Watch for any degradation in speed or responsiveness

## User-Centric Patterns
- **Invisible Complexity**: Advanced features work automatically
- **Predictable Behavior**: Actions have expected, consistent results
- **Forgiving Interface**: Hard to accidentally lose work or break things
- **Professional Output**: Content looks polished in preview and exported files 